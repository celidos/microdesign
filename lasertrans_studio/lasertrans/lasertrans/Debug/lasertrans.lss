
lasertrans.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800060  00800060  00000170  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ed  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014f  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000179  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001dc  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000153  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__vector_11>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a1 37       	cpi	r26, 0x71	; 113
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	3b d0       	rcall	.+118    	; 0xbe <main>
  48:	57 c0       	rjmp	.+174    	; 0xf8 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <init>:
char ndex = 0;

void init()
{
	// настройка внешних устройств
	DDRB	   |=  (1 << LED);							// Лампочка - на выход (кнопка на вход по умолчанию)
  4c:	b9 9a       	sbi	0x17, 1	; 23
	DDRB       &= ~(1 << BUTTON);
  4e:	ba 98       	cbi	0x17, 2	; 23
	PORTB      |= (1 << LED);          //&= ~(1 << LED);		// По умолчанию лампочка горит
  50:	c1 9a       	sbi	0x18, 1	; 24
	
	UCSRA       =  0x00;	// b 0 0 0 0 0 0 0 0
  52:	1b b8       	out	0x0b, r1	; 11
							//       0            0 показывает, что буфер пустой
							//         0 0 0      Ошибки не обрабатываем
							//               0    Двойная скорость не нужна
							//                 0  Наркоманский режим, который не нужен
	
	UCSRB		=  0x98;	//
  54:	88 e9       	ldi	r24, 0x98	; 152
  56:	8a b9       	out	0x0a, r24	; 10
	UCSRC		=  0x86;    //
  58:	86 e8       	ldi	r24, 0x86	; 134
  5a:	80 bd       	out	0x20, r24	; 32
	UBRRH		=  0x00;    // Старший байт скорости USART - скорость 9600 влезает в один байт
  5c:	10 bc       	out	0x20, r1	; 32
	UBRRL		=  0x67;    // 103d - задает скорость 9600 бит/с
  5e:	87 e6       	ldi	r24, 0x67	; 103
  60:	89 b9       	out	0x09, r24	; 9
	
	ndex = 0;
  62:	10 92 60 00 	sts	0x0060, r1
	
	sei();
  66:	78 94       	sei
  68:	08 95       	ret

0000006a <__vector_11>:
}

ISR (USART_RX_vect)
{
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	ef 93       	push	r30
  7a:	ff 93       	push	r31
	//if (UCSRA & (1 << RXC))
	//{
		data[ndex] = UDR;
  7c:	80 91 60 00 	lds	r24, 0x0060
  80:	9c b1       	in	r25, 0x0c	; 12
  82:	e8 2f       	mov	r30, r24
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	ef 59       	subi	r30, 0x9F	; 159
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	90 83       	st	Z, r25
		ndex = (ndex + 1) & (MAXDATA - 1);
  8c:	8f 5f       	subi	r24, 0xFF	; 255
  8e:	8f 70       	andi	r24, 0x0F	; 15
  90:	80 93 60 00 	sts	0x0060, r24
	//}
}
  94:	ff 91       	pop	r31
  96:	ef 91       	pop	r30
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <trasmit_data>:

void trasmit_data()
{
  a6:	e1 e6       	ldi	r30, 0x61	; 97
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	81 e7       	ldi	r24, 0x71	; 113
  ac:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < MAXDATA; ++i)
	{
		while (! (UCSRA & (1 << UDRE)));
  ae:	5d 9b       	sbis	0x0b, 5	; 11
  b0:	fe cf       	rjmp	.-4      	; 0xae <trasmit_data+0x8>
		
		UDR = data[i];
  b2:	21 91       	ld	r18, Z+
  b4:	2c b9       	out	0x0c, r18	; 12
	//}
}

void trasmit_data()
{
	for (int i = 0; i < MAXDATA; ++i)
  b6:	e8 17       	cp	r30, r24
  b8:	f9 07       	cpc	r31, r25
  ba:	c9 f7       	brne	.-14     	; 0xae <trasmit_data+0x8>
	{
		while (! (UCSRA & (1 << UDRE)));
		
		UDR = data[i];
	}
}
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	init();
  be:	c6 df       	rcall	.-116    	; 0x4c <init>
		PORTB      |= (1 << LED);          //&= ~(1 << LED);		// По умолчанию лампочка горит*/
	
	
	char last_button_state = 0;
	char cur;
	char led_state = 0;
  c0:	d0 e0       	ldi	r29, 0x00	; 0
		/*DDRB	   |=  (1 << LED);							// Лампочка - на выход (кнопка на вход по умолчанию)
		DDRB       &= ~(1 << BUTTON);
		PORTB      |= (1 << LED);          //&= ~(1 << LED);		// По умолчанию лампочка горит*/
	
	
	char last_button_state = 0;
  c2:	90 e0       	ldi	r25, 0x00	; 0
	while (1)
	{
		cur = (PINB & (1 << BUTTON));
		if (cur && !last_button_state) // Если кнопка нажата
		{
			led_state = 1 - led_state;
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0xc>
  c8:	9c 2f       	mov	r25, r28
	char cur;
	char led_state = 0;

	while (1)
	{
		cur = (PINB & (1 << BUTTON));
  ca:	86 b3       	in	r24, 0x16	; 22
		if (cur && !last_button_state) // Если кнопка нажата
  cc:	c8 2f       	mov	r28, r24
  ce:	c4 70       	andi	r28, 0x04	; 4
  d0:	82 ff       	sbrs	r24, 2
  d2:	0c c0       	rjmp	.+24     	; 0xec <main+0x2e>
  d4:	91 11       	cpse	r25, r1
  d6:	0a c0       	rjmp	.+20     	; 0xec <main+0x2e>
		{
			led_state = 1 - led_state;
  d8:	81 2f       	mov	r24, r17
  da:	8d 1b       	sub	r24, r29
  dc:	d8 2f       	mov	r29, r24
			trasmit_data();
  de:	e3 df       	rcall	.-58     	; 0xa6 <trasmit_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e3       	ldi	r24, 0x3F	; 63
  e2:	9c e9       	ldi	r25, 0x9C	; 156
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x26>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2c>
  ea:	00 00       	nop
			_delay_ms(BUTTONS_POLL_INTERVAL);
		}
		
		if (led_state)
  ec:	dd 23       	and	r29, r29
  ee:	11 f0       	breq	.+4      	; 0xf4 <main+0x36>
		{
			PORTB |= (1 << LED);		// включаем светодиод (инверсия на микросхеме)
  f0:	c1 9a       	sbi	0x18, 1	; 24
  f2:	ea cf       	rjmp	.-44     	; 0xc8 <main+0xa>
			
		}
		else
			PORTB &= ~(1 << LED);	// Иначе выключаем
  f4:	c1 98       	cbi	0x18, 1	; 24
  f6:	e8 cf       	rjmp	.-48     	; 0xc8 <main+0xa>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
