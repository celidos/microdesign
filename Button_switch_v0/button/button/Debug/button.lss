
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000142  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000135  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001aa  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006b  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	1e c0       	rjmp	.+60     	; 0x76 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:

#define BUTTONS_POLL_INTERVAL 10

int main(void)
{
	LED_DDR    |= (1 << LED);     // пин светодиода настраиваем как выход
  3c:	b9 9a       	sbi	0x17, 1	; 23
	LED_PORT   &= ~(1 << LED);    // По дефолту выключаем
  3e:	c1 98       	cbi	0x18, 1	; 24
	BUTTON_DDR &= ~(1 << BUTTON); // пин кнопки принудительно ставим в 0
  40:	ba 98       	cbi	0x17, 2	; 23
	
	char led_state = 0;
	char last_button_state = 0;
  42:	30 e0       	ldi	r19, 0x00	; 0
{
	LED_DDR    |= (1 << LED);     // пин светодиода настраиваем как выход
	LED_PORT   &= ~(1 << LED);    // По дефолту выключаем
	BUTTON_DDR &= ~(1 << BUTTON); // пин кнопки принудительно ставим в 0
	
	char led_state = 0;
  44:	20 e0       	ldi	r18, 0x00	; 0
	while (1)
	{
		cur = (BUTTON_PIN & (1 << BUTTON));
		if (cur && !last_button_state) // Если кнопка нажата
		{
			led_state = 1 - led_state;
  46:	41 e0       	ldi	r20, 0x01	; 1
	char last_button_state = 0;
	char cur;

	while (1)
	{
		cur = (BUTTON_PIN & (1 << BUTTON));
  48:	86 b3       	in	r24, 0x16	; 22
		if (cur && !last_button_state) // Если кнопка нажата
  4a:	98 2f       	mov	r25, r24
  4c:	94 70       	andi	r25, 0x04	; 4
  4e:	82 ff       	sbrs	r24, 2
  50:	05 c0       	rjmp	.+10     	; 0x5c <__SREG__+0x1d>
  52:	31 11       	cpse	r19, r1
  54:	03 c0       	rjmp	.+6      	; 0x5c <__SREG__+0x1d>
		{
			led_state = 1 - led_state;
  56:	84 2f       	mov	r24, r20
  58:	82 1b       	sub	r24, r18
  5a:	28 2f       	mov	r18, r24
		}
		
		if (led_state)	
  5c:	22 23       	and	r18, r18
  5e:	11 f0       	breq	.+4      	; 0x64 <__SREG__+0x25>
			LED_PORT |= (1 << LED);		// включаем светодиод (инверсия на микросхеме)
  60:	c1 9a       	sbi	0x18, 1	; 24
  62:	01 c0       	rjmp	.+2      	; 0x66 <__SREG__+0x27>
		else
			LED_PORT &= ~(1 << LED);	// Иначе выключаем
  64:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	ef e3       	ldi	r30, 0x3F	; 63
  68:	fc e9       	ldi	r31, 0x9C	; 156
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <__SREG__+0x2b>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <__SREG__+0x31>
  70:	00 00       	nop
		
		last_button_state = cur;
  72:	39 2f       	mov	r19, r25
  74:	e9 cf       	rjmp	.-46     	; 0x48 <__SREG__+0x9>

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
