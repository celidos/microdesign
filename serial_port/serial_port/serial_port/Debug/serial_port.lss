
serial_port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000122  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000fb  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b0  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000de  00000000  00000000  0000032d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000173  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  000005d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	26 c0       	rjmp	.+76     	; 0x64 <__vector_11>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a2 36       	cpi	r26, 0x62	; 98
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	21 d0       	rcall	.+66     	; 0x8a <main>
  48:	30 c0       	rjmp	.+96     	; 0xaa <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <init>:
char flagRX = 0;

void init()
{
	// настройка внешних устройств
	DDRB	   |=  (1 << LED);							// Индикатор и мигающий диод - на выход
  4c:	b9 9a       	sbi	0x17, 1	; 23
	PORTB       =  0x00;          //&= ~(1 << LED);		// По умолчанию лампочка не горит
  4e:	18 ba       	out	0x18, r1	; 24
	
	UCSRA       =  0x00;	// b 0 0 0 0 0 0 0 0 
  50:	1b b8       	out	0x0b, r1	; 11
							//       0            0 показывает, что буфер пустой
							//         0 0 0      Ошибки не обрабатываем
							//               0    Двойная скорость не нужна
							//                 0  Наркоманский режим,который не нужен
							
	UCSRB		=  0x98;	// 
  52:	88 e9       	ldi	r24, 0x98	; 152
  54:	8a b9       	out	0x0a, r24	; 10
	UCSRC		=  0x86;    //
  56:	86 e8       	ldi	r24, 0x86	; 134
  58:	80 bd       	out	0x20, r24	; 32
	UBRRH		=  0x00;    // Старший байт скорости USART - скорость 9600 влезает в один байт
  5a:	10 bc       	out	0x20, r1	; 32
	UBRRL		=  0x67;    // 103d - задает скорость 9600 бит/с
  5c:	87 e6       	ldi	r24, 0x67	; 103
  5e:	89 b9       	out	0x09, r24	; 9
	
	sei();
  60:	78 94       	sei
  62:	08 95       	ret

00000064 <__vector_11>:
}

ISR (USART_RX_vect)
{
  64:	1f 92       	push	r1
  66:	0f 92       	push	r0
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	0f 92       	push	r0
  6c:	11 24       	eor	r1, r1
  6e:	8f 93       	push	r24
	//if (UCSRA & (1 << RXC))
	//{
		recieved_data = UDR;
  70:	8c b1       	in	r24, 0x0c	; 12
  72:	80 93 61 00 	sts	0x0061, r24
		PORTB = recieved_data;
  76:	88 bb       	out	0x18, r24	; 24
		flagRX = 0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 60 00 	sts	0x0060, r24
	//}
	

	
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <main>:

char f;

int main(void)
{
	init();
  8a:	e0 df       	rcall	.-64     	; 0x4c <init>
	
	while (1)
	{
		if (flagRX == 0x01)
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	09 f0       	breq	.+2      	; 0x96 <main+0xc>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0xa>
		{
			while (!(UCSRA & (1 << UDRE))) { };
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0xc>
			UDR				= recieved_data;
  9a:	80 91 61 00 	lds	r24, 0x0061
  9e:	8c b9       	out	0x0c, r24	; 12
			recieved_data	= 0;
  a0:	10 92 61 00 	sts	0x0061, r1
			flagRX			= 0;
  a4:	10 92 60 00 	sts	0x0060, r1
  a8:	f1 cf       	rjmp	.-30     	; 0x8c <main+0x2>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
