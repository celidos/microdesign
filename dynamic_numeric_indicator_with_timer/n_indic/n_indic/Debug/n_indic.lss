
n_indic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000013e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001c6  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000113  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ba  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	7d c0       	rjmp	.+250    	; 0x112 <__vector_11>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	36 c0       	rjmp	.+108    	; 0x94 <__vector_19>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee e3       	ldi	r30, 0x3E	; 62
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 37       	cpi	r26, 0x72	; 114
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a2 e7       	ldi	r26, 0x72	; 114
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a4 37       	cpi	r26, 0x74	; 116
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	6c d0       	rcall	.+216    	; 0x136 <main>
  5e:	6d c0       	rjmp	.+218    	; 0x13a <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <init>:
}

void init()
{
	// внешние устройства
	DDRC		 =  0xFF;								// Весь порт C - на выход (индикатора)
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	84 bb       	out	0x14, r24	; 20
	DDRA		|= (1 << PA6) | (1 << PA7);				// Аноды индикаторов (идут на микросхему 1554ЛА3, нужны для динамической индикации)
  66:	8a b3       	in	r24, 0x1a	; 26
  68:	80 6c       	ori	r24, 0xC0	; 192
  6a:	8a bb       	out	0x1a, r24	; 26
														// PA6 - младший разряд, PA7 - старший
														
	PORTC		 =  0x00;								// Изначально ничего не горит
  6c:	15 ba       	out	0x15, r1	; 21
	PORTA		|= (1 << PA6) | (1 << PA7);				//  PA6 и PA7 := 1
  6e:	8b b3       	in	r24, 0x1b	; 27
  70:	80 6c       	ori	r24, 0xC0	; 192
  72:	8b bb       	out	0x1b, r24	; 27
	
	// инициализация таймера
	
	TIMSK       = (1 << BIT_TIMER0_COMPARE_INTERRUPT);	// маска для прерывания от таймера 0 по свопадению OCR0 и счетчика TCNT0 таймера
  74:	82 e0       	ldi	r24, 0x02	; 2
  76:	89 bf       	out	0x39, r24	; 57
	
	TCCR0       = 0x0D;                                 // 0b 0 0 0 0 1 1 0 1   (предделитель 1/1024)
  78:	8d e0       	ldi	r24, 0x0D	; 13
  7a:	83 bf       	out	0x33, r24	; 51
	OCR0        = 0x80;									// Максимальное значение регистра сравнения (до срабатывания таймера)
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	8c bf       	out	0x3c, r24	; 60
	
	// инициализация COM-порта
	UCSRA       =  0x00;	// b 0 0 0 0 0 0 0 0
  80:	1b b8       	out	0x0b, r1	; 11
	//       0            0 показывает, что буфер пустой
	//         0 0 0      Ошибки не обрабатываем
	//               0    Двойная скорость не нужна
	//                 0  Наркоманский режим,который не нужен
		
	UCSRB		=  0x98;	//
  82:	88 e9       	ldi	r24, 0x98	; 152
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC		=  0x86;    //
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UBRRH		=  0x00;    // Старший байт скорости USART - скорость 9600 влезает в один байт
  8a:	10 bc       	out	0x20, r1	; 32
	UBRRL		=  0x67;    // 103d - задает скорость 9600 бит/с
  8c:	87 e6       	ldi	r24, 0x67	; 103
  8e:	89 b9       	out	0x09, r24	; 9
	
	// разрешаем прерывания
	sei();												// SREG		= (1 << 7);
  90:	78 94       	sei
  92:	08 95       	ret

00000094 <__vector_19>:
}

ISR (TIMER0_COMP_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	++timer_count;
  a6:	80 91 72 00 	lds	r24, 0x0072
  aa:	8f 5f       	subi	r24, 0xFF	; 255
	if (timer_count > max_timer_count)
  ac:	8e 33       	cpi	r24, 0x3E	; 62
  ae:	18 f4       	brcc	.+6      	; 0xb6 <__vector_19+0x22>
	sei();												// SREG		= (1 << 7);
}

ISR (TIMER0_COMP_vect)
{
	++timer_count;
  b0:	80 93 72 00 	sts	0x0072, r24
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <__vector_19+0x30>
	if (timer_count > max_timer_count)
	{
		timer_count = 0;
  b6:	10 92 72 00 	sts	0x0072, r1
		++recieved_data;
  ba:	80 91 70 00 	lds	r24, 0x0070
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 70 00 	sts	0x0070, r24
	}
	reg_switcher ^= 1;
  c4:	90 91 73 00 	lds	r25, 0x0073
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	80 93 73 00 	sts	0x0073, r24
	
	if (reg_switcher)								// Младший записываем
  d0:	88 23       	and	r24, r24
  d2:	59 f0       	breq	.+22     	; 0xea <__vector_19+0x56>
	{
		PORTA			&= ~(1 << PA6);					// PA6 := 0
  d4:	de 98       	cbi	0x1b, 6	; 27
		PORTA			|=  (1 << PA7);
  d6:	df 9a       	sbi	0x1b, 7	; 27
		display_number(recieved_data & ((1 << 4) - 1));
  d8:	e0 91 70 00 	lds	r30, 0x0070
  dc:	ef 70       	andi	r30, 0x0F	; 15
  de:	f0 e0       	ldi	r31, 0x00	; 0
char LED_NUMBER[16] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90,
					   0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
					   
void display_number(int x)
{
	PORTC = LED_NUMBER[x];
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 81       	ld	r24, Z
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	0b c0       	rjmp	.+22     	; 0x100 <__vector_19+0x6c>
		PORTA			|=  (1 << PA7);
		display_number(recieved_data & ((1 << 4) - 1));
	}
	else											// Старший записываем
	{
		PORTA			&= ~(1 << PA7);					// PA7 := 0
  ea:	df 98       	cbi	0x1b, 7	; 27
		PORTA			|=  (1 << PA6);
  ec:	de 9a       	sbi	0x1b, 6	; 27
		display_number(recieved_data >> 4);
  ee:	e0 91 70 00 	lds	r30, 0x0070
  f2:	e2 95       	swap	r30
  f4:	ef 70       	andi	r30, 0x0F	; 15
  f6:	f0 e0       	ldi	r31, 0x00	; 0
char LED_NUMBER[16] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90,
					   0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
					   
void display_number(int x)
{
	PORTC = LED_NUMBER[x];
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
	{
		PORTA			&= ~(1 << PA7);					// PA7 := 0
		PORTA			|=  (1 << PA6);
		display_number(recieved_data >> 4);
	}	
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_11>:

ISR (USART_RX_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	recieved_data = UDR;
 11e:	8c b1       	in	r24, 0x0c	; 12
 120:	80 93 70 00 	sts	0x0070, r24
	
	while (!(UCSRA & (1 << UDRE))) { };
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <__vector_11+0x12>

	UDR				= recieved_data;
 128:	8c b9       	out	0x0c, r24	; 12
}
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:

int main(void)
{
	init();
 136:	95 df       	rcall	.-214    	; 0x62 <init>
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x2>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
